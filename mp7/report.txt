PUT YOUR MP7 REPORT IN THIS FILE.

PART I: printRev

1. Identifying the bug
The code takes in one string and print out the string in its reverse order, and the length of the string. 
If no string were taken, the program raises an error. 

Erroneous test cases
My Input: “ece220”
Desired Output：
9 8 7 6 5 4 3 2 1 0
What's on the stack now?

“ece220" reversed is "022ece" (length 6)

Actual Output:
9 8 7 6 5 4 3 2 1 0
What's on the stack now?

"ece220" reversed is "022ece" (length 32770)

Correct Test case:
My Input: “123”
Desired Output：
9 8 7 6 5 4 3 2 1 0
What's on the stack now?

"123" reversed is "321" (length 3)

Actual Output:
9 8 7 6 5 4 3 2 1 0
What's on the stack now?

"123" reversed is "321" (length 3)

2.Trace the bug
	gdb commands I used:
	break pr_buggy.c:41
	run apple
	display rest
	continue
	Results from the gdb(partially):

	Breakpoint 1, print_reverse (s=0x7fffffffe05c "le") at pr_buggy.c:40
	40          if ('\0' == *s) {
	2: rest = 0
	(gdb) 
	Continuing.
	
	Breakpoint 1, print_reverse (s=0x7fffffffe05d "e") at pr_buggy.c:40
	40          if ('\0' == *s) {
	2: rest = 32767
	(gdb) 
	Continuing.

	We can see from the results produced above, the former variable “rest” during the recursion process is initialized to be 0, 
	but it was suddenly initialized to a erroneous number 32676. It should always be 0 during recursion,so this leads to the bad result.   

3.Analysis of the bug: The bug lies in the function “print_reverse” in which the variable “rest” is never initialized. 
The erroneous result is due to the fact that the  integer “rest” was not initialized and might become a random number in the memory. 
I fix the bug by initializing the variable as 0.


PART II:
1. Identifying the bug
My input: This program does not need input.
Correct Test case(ideal output):
2 is prime.
3 is prime.
4 is prime.
5 is prime.
7 is prime.(Etc.)
Erroneous Test cases:	All of the prime’s squares.
4 is prime.
9 is prime.
25 is prime.
49 is prime.(Etc.)
2.Trace the bug
	gdb commands I used:
	break is_prime
	break divides_envenly
	c
	
	Results produced when dividing 9:
	Breakpoint 2, divides_evenly (divisor=2, value=9) at primeNumber.c:63
	Breakpoint 1, 0x00005555555551c4 in is_prime ()
	Breakpoint 2, divides_evenly (divisor=2, value=10) at primeNumber.c:63

	as we can see from the output of 9, the divisor parameter 3 that could prove that 9 is not a prime number is never passed into the function. So this cause the program to believe that 9 is a prime number, causing the error.


3.Analysis of the bug: 
	This bug might be caused by the divisor deciding mechanism of the program.   When the program is trying to the find the range of the divisor, its upper boundary is faulty, so it might be the case that the program missed a “=”, for example the program mean to take the square root, for example 9 take the square root resulting in 3, but the divisor range should be from 2 to 3. However the program might somehow use “<” instead of “<=” which turn the divisor range {2}.This will cause the program to print all the prime squares.
	

PART III	SORT

1. Identifying the bug

Erroneous test cases
My Input: run “test1.txt”
Desired Output：1 3 9 12 13 15 18 19 22 23 29 41 45 51 58 96 97 99 100 117
Actual Output:1 3 9 9 12 13 15 18 19 22 23 29 41 45 51 58 96 97 99 100 


Correct Test case:
My Input: “test1.txt”
Desired Output：1 3 9 12 13 15 18 19 22 23 29 41 45 51 58 96 97 99 100 117
Actual Output:1 3 9 12 13 15 18 19 22 23 29 41 45 51 58 96 97 99 100 117

2.Trace the bug
	gdb commands I used:
	break heapify
	break swap
	diplay *arr@21
	start test1.txt
	continue
	

I picked one of the gdb output:
1: *arr@21 = {9, 15, 13, 12, 15, 1, 3, 18, 19, 22, 23, 29, 41, 45, 51, 58, 96, 
  97, 99, 100, 117}

	As we can see from the displayed value of arr[20], it is not hard to find that arr[20] is out of the bound of the original array which only allocates 20 spaces from offset 0 to 19. 
	To find why the number will appear in the out of bound location, I created test2.txt:
	4
	1 3 4 2
	Which will help debug easier.
	gdb commands I used:
	break heapify
	break swap
	start test2.txt
	continue
	display *arr@6
	
I picked two output of the array.

Breakpoint 2, heapify (arr=0x55555555a490, n=21845, i=1431676056) at sort.c:19
19	{
1: *arr@6 = {4, 3, 1, 2, 2, 0}
(gdb) 
Continuing.

Breakpoint 1, swap (a=0x55555555a490, b=0x400000000) at sort.c:3
3	void swap(int * a, int* b){
(gdb) 
Continuing.

Breakpoint 2, heapify (arr=0x55555555a490, n=21845, i=1431676064) at sort.c:19
19	{
1: *arr@6 = {2, 3, 1, 2, 4, 0}
(gdb) 
Continuing.

As we can see in this example, the swap function actually swap arr[0] with arr[4] whose index is out of bounds. The number never return to the index 0~3 locations.

3.Analysis of the bug: 
	Because each time the way the program output the sorted array is not predictable, I think the reason is that the numbers to be sorted is put into the arr[20]. For example swapping a value with the last value arr[20] instead arr[19]. But in some lucky cases we don’t need to swap the last number, so the problem appear randomly.
